AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  References:
    - https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/build-pipeline.html
    - https://github.com/stelligent/sample-pipeline-with-cfn-nag/blob/2c3200f56789412989e04beb2341f7a0ca55e165/toolchain/pipeline.yml
  Commands:
    - aws cloudformation validate-template --template-body file://ci.yml
    - aws cloudformation deploy --template-file ./ci.yml --stack-name lakeman-ci \
        --capabilities CAPABILITY_IAM \
        --parameter-overrides GitHubOAuthToken=${GitHubOAuthToken}  GitHubSecret=${GitHubSecret} \
        --region ${REGION} --profile ${PROFILE}
Parameters:
  Env:
    Type: String
    Default: dev
  BranchName:
    Description: GitHub branch name
    Type: String
    Default: master
  RepositoryName:
    Description: GitHub repository name
    Type: String
    Default: lakeman
  GitHubOwner:
    Type: String
    Default: hiroga-cc
  GitHubSecret:
    Type: String
    NoEcho: true
  GitHubOAuthToken:
    Type: String
    NoEcho: true
  ApplicationName:
    Description: CodeDeploy application name
    Type: String
    Default: DemoApplication
  ProjectBaseName:
    Description: CodeDeploy application name
    Type: String
    Default: lakeman-pipline-build
  ChangeSetBaseName:
    Description: CodeDeploy application name
    Type: String
    Default: lakeman-changeset
  StackBaseName:
    Description: CodeDeploy application name
    Type: String
    Default: lakeman-stack
  BetaFleet:
    Description: Fleet configured in CodeDeploy
    Type: String
    Default: DemoFleet
Resources:
  ArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub ${Env}-${AWS::StackName}-artifact-store-bucket
  ArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
            Action: 's3:PutObject'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - ArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - ArtifactStoreBucket
                  - Arn
                - /*
            Condition:
              Bool:
                'aws:SecureTransport': false
  AppPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubSecret
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref AppPipeline
      TargetAction: SourceAction
      Name: AppPipelineWebhook
      TargetPipelineVersion: !GetAtt 
        - AppPipeline
        - Version
      RegisterWithThirdParty: true
  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub ${Env}-lakeman-pipeline
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref RepositoryName
                Branch: !Ref BranchName
                OAuthToken: !Ref GitHubOAuthToken
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Sub ${Env}-${ProjectBaseName}
              RunOrder: 1
        - Name: CreateChangeset
          Actions:
            - Name: create-changeset
              InputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: "CHANGE_SET_REPLACE"
                Capabilities: CAPABILITY_IAM
                ChangeSetName: !Sub ${Env}-${ChangeSetBaseName}
                RoleArn: !GetAtt
                  - CloudFormationRole
                  - Arn
                StackName: !Sub ${Env}-${StackBaseName}
                TemplatePath: "BuildOutput::outputtemplate.yml"
              RunOrder: 1
        - Name: ExecuteChangeset
          Actions:
            - Name: execute-changeset
              InputArtifacts:
                - Name: BuildOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: "CHANGE_SET_EXECUTE"
                ChangeSetName: !Sub ${Env}-${ChangeSetBaseName}
                StackName: !Sub ${Env}-${StackBaseName}
              RunOrder: 1
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactStoreBucket
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${Env}-${ProjectBaseName}
      Description: Build project for the Lambda service
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        EnvironmentVariables:
          - Name: BUILD_OUTPUT_BUCKET
            Value: !Ref ArtifactStoreBucket
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodePipeline-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codecommit:CancelUploadArchive'
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:UploadArchive'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'devicefarm:ListProjects'
                  - 'devicefarm:ListDevicePools'
                  - 'devicefarm:GetRun'
                  - 'devicefarm:GetUpload'
                  - 'devicefarm:CreateUpload'
                  - 'devicefarm:ScheduleRun'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'elasticbeanstalk:*'
                  - 'ec2:*'
                  - 'elasticloadbalancing:*'
                  - 'autoscaling:*'
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'sns:*'
                  - 'cloudformation:*'
                  - 'rds:*'
                  - 'sqs:*'
                  - 'ecs:*'
                Resource: '*'
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: AWS-CodeBuild-Service-3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:*'
                  - 's3:*'
                  - 'cloudformation:*'
                  - 'cloudwatch:*'
                  - 'logs:*' # to avoid `... is not authorized to perform: logs:CreateLogStream on resource: ...`
                Resource: '*'
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - cloudformation.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: deploy-serverless-application
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            Resource: '*'
            Effect: Allow
          - Action:
            - lambda:AddPermission
            - lambda:CreateAlias
            - lambda:CreateFunction
            - lambda:DeleteFunction
            - lambda:UpdateFunctionCode
            - lambda:GetFunctionConfiguration
            - lambda:UpdateFunctionConfiguration
            - lambda:UpdateAlias
            - lambda:RemovePermission
            - lambda:PublishVersion
            - lambda:InvokeFunction
            Resource: '*'
            Effect: Allow
          - Action:
            - apigateway:GET
            - apigateway:POST
            - apigateway:PUT
            - apigateway:PATCH
            - apigateway:DELETE
            Resource: '*'
            Effect: Allow
          - Action:
            - lambda:ListTags
            - lambda:TagResource
            - lambda:UntagResource
            Resource: '*'
            Effect: Allow
          - Action:
            - iam:CreateRole
            - iam:DeleteRole
            - iam:PassRole
            - iam:GetRole
            - iam:PutRolePolicy
            - iam:DeleteRolePolicy
            - iam:AttachRolePolicy
            - iam:DetachRolePolicy
            - iam:GetRolePolicy
            - iam:ListRolePolicies
            - iam:UpdateAssumeRolePolicy
            Effect: Allow
            Resource: '*'
          - Action:
            - cloudformation:CreateChangeSet
            Resource: '*'
            Effect: Allow
          - Action:
            - events:*
            Resource: '*'
            Effect: Allow
